--- a/ivp/src/CMakeLists.txt
+++ b/ivp/src/CMakeLists.txt
@@ -37,19 +37,6 @@
 message("MOOS_INCLUDE_DIRS:" ${MOOS_INCLUDE_DIRS})
 message("+++++++++++++++++++++++++++++++++++++++++")
 
-#===============================================================================
-# FINDING MOOSGeodesy' HEADERS AND LIBRARIES...
-#===============================================================================
-
-# moos - http://www.robots.ox.ac.uk/~mobile/MOOS/wiki/pmwiki.php
-find_package(MOOSGeodesy)
-include_directories(${MOOSGeodesy_INCLUDE_DIRS})
-link_directories(${MOOSGeodesy_LIBRARY_PATH})
-
-message("+++++++++++++++++++++++++++++++++++++++++")
-message("MOOSGeodesy_INCLUDE_DIRS:" ${MOOSGeodesy_INCLUDE_DIRS})
-message("+++++++++++++++++++++++++++++++++++++++++")
-
 
 
 
@@ -113,6 +100,7 @@
    lib_behaviors-marine
    lib_bhvutil
    lib_genutil
+   lib_geodesy
    lib_geometry
    lib_helmivp
    lib_ivpbuild
--- /dev/null
+++ b/ivp/src/lib_geodesy/CMakeLists.txt
@@ -0,0 +1,74 @@
+set(LIBNAME MOOSGeodesy)
+
+SET(SOURCES
+    MOOSGeodesy.cpp
+)
+
+##########################
+# Packages / Dependencies
+set(INCLUDE_ROOTS
+    ${CMAKE_CURRENT_SOURCE_DIR}/include
+)
+
+set(${LIBNAME}_DEPEND_INCLUDE_DIRS
+    ${INCLUDE_ROOTS}
+    CACHE INTERNAL
+    "List of include dirs for the dependencies of ${LIBNAME}"
+)
+list(REMOVE_DUPLICATES ${LIBNAME}_DEPEND_INCLUDE_DIRS)
+
+if(UNIX)
+    set(DEPENDENCIES m)
+endif(UNIX)
+
+
+set(${LIBNAME}_DEPEND_LIBRARIES
+    ${DEPENDENCIES}
+    CACHE INTERNAL
+    "List of libraries which are dependencies of ${LIBNAME}"
+)
+list(REMOVE_DUPLICATES ${LIBNAME}_DEPEND_LIBRARIES)
+
+
+#######################################
+# Export include and library locations
+# This is essentially boilerplate.  Shouldn't need to change it.
+
+set(${LIBNAME}_INCLUDE_DIRS
+    ${INCLUDE_ROOTS}
+    CACHE INTERNAL
+    "Where to find ${LIBNAME} include directories"
+)
+list(REMOVE_DUPLICATES ${LIBNAME}_INCLUDE_DIRS)
+
+set(${LIBNAME}_LIBRARIES
+    ${LIBNAME}
+    CACHE INTERNAL
+    "List of libraries needed to link ${LIBNAME} library"
+)
+list(REMOVE_DUPLICATES ${LIBNAME}_LIBRARIES)
+
+
+
+
+#######################################
+# Create the library
+# This is boilerplate.  Any extra libs you want to link should be in the '..._DEPEND_...'
+# variables
+include_directories(${${LIBNAME}_INCLUDE_DIRS} ${${LIBNAME}_DEPEND_INCLUDE_DIRS})
+add_library(${LIBNAME} ${SOURCES} ${PUBLIC_HEADERS})
+target_link_libraries(${LIBNAME} ${${LIBNAME}_DEPEND_LIBRARIES} proj)
+
+#######################################
+# install headers
+install(DIRECTORY ${INCLUDE_ROOTS} DESTINATION ${CMAKE_INSTALL_PREFIX} FILES_MATCHING PATTERN "*.h")
+
+
+# install libraries
+INSTALL(TARGETS ${LIBNAME}
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+
+
--- /dev/null
+++ b/ivp/src/lib_geodesy/MOOSGeodesy.cpp
@@ -0,0 +1,192 @@
+// Copyright 2009-2013 Toby Schneider (https://launchpad.net/~tes)
+//                     Massachusetts Institute of Technology (2007-)
+//                     Woods Hole Oceanographic Institution (2007-)
+//                     Goby Developers Team (https://launchpad.net/~goby-dev)
+//
+//
+// This file is part of the Goby Underwater Autonomy Project MOOS Interface Library
+// ("The Goby MOOS Library").
+//
+// The Goby MOOS Library is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// The Goby MOOS Library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Goby.  If not, see <http://www.gnu.org/licenses/>.
+
+#include <cmath>
+#include <sstream>
+#include <iostream>
+#include <limits>
+
+#include "MOOSGeodesy.h"
+
+CMOOSGeodesy::CMOOSGeodesy() : m_sUTMZone(0),
+                               m_dOriginEasting(0),
+                               m_dOriginNorthing(0),
+                               m_dOriginLongitude(0),
+                               m_dOriginLatitude(0),
+                               pj_utm_(0),
+                               pj_latlong_(0)
+{ }
+
+CMOOSGeodesy::~CMOOSGeodesy()
+{
+    pj_free(pj_utm_);
+    pj_free(pj_latlong_);
+}
+
+bool CMOOSGeodesy::Initialise(double lat, double lon)
+{
+    //Set the Origin of the local Grid Coordinate System
+    SetOriginLatitude(lat);
+    SetOriginLongitude(lon);
+
+    int zone = (static_cast<int>(std::floor((lon + 180)/6)) + 1) % 60;
+
+    std::stringstream proj_utm;
+    proj_utm << "+proj=utm +ellps=WGS84 +zone=" << zone;
+
+    if (!(pj_utm_ = pj_init_plus(proj_utm.str().c_str())))
+    {
+        std::cerr << "Failed to initiate utm proj" << std::endl;
+        return false;
+    }
+    if (!(pj_latlong_ = pj_init_plus("+proj=latlong +ellps=WGS84")) )
+    {
+        std::cerr << "Failed to initiate latlong proj" << std::endl;
+        return false;
+    }
+
+    //Translate the Origin coordinates into Northings and Eastings
+    double tempNorth = lat*DEG_TO_RAD,
+        tempEast = lon*DEG_TO_RAD;
+
+    int err;
+    if(err = pj_transform(pj_latlong_, pj_utm_, 1, 1, &tempEast, &tempNorth, NULL))
+    {
+        std::cerr << "Failed to transform datum, reason: " << pj_strerrno(err) << std::endl;
+        return false;
+    }
+
+    //Then set the Origin for the Northing/Easting coordinate frame
+    //Also make a note of the UTM Zone we are operating in
+    SetOriginNorthing(tempNorth);
+    SetOriginEasting(tempEast);
+    SetUTMZone(zone);
+
+    return true;
+}
+
+double CMOOSGeodesy::GetOriginLongitude()
+{
+    return m_dOriginLongitude;
+}
+
+double CMOOSGeodesy::GetOriginLatitude()
+{
+    return m_dOriginLatitude;
+}
+
+void CMOOSGeodesy::SetOriginLongitude(double lon)
+{
+    m_dOriginLongitude = lon;
+}
+
+void CMOOSGeodesy::SetOriginLatitude(double lat)
+{
+    m_dOriginLatitude = lat;
+}
+
+void CMOOSGeodesy::SetOriginNorthing(double North)
+{
+    m_dOriginNorthing = North;
+}
+
+void CMOOSGeodesy::SetOriginEasting(double East)
+{
+    m_dOriginEasting = East;
+}
+
+void CMOOSGeodesy::SetUTMZone(int zone)
+{
+    m_sUTMZone = zone;
+}
+
+int CMOOSGeodesy::GetUTMZone()
+{
+    return m_sUTMZone;
+}
+
+
+bool CMOOSGeodesy::LatLong2LocalUTM(double lat,
+                                    double lon,
+                                    double &MetersNorth,
+                                    double &MetersEast)
+{
+    double dN, dE;
+    double tmpEast = lon * DEG_TO_RAD;
+    double tmpNorth = lat * DEG_TO_RAD;
+    MetersNorth = std::numeric_limits<double>::quiet_NaN();
+    MetersEast =  std::numeric_limits<double>::quiet_NaN();
+
+    if(!pj_latlong_ || !pj_utm_)
+    {
+        std::cerr << "Must call Initialise before calling LatLong2LocalUTM" << std::endl;
+        return false;
+    }
+
+    int err;
+    if(err = pj_transform(pj_latlong_, pj_utm_, 1, 1, &tmpEast, &tmpNorth, NULL ))
+    {
+        std::cerr << "Failed to transform (lat,lon) = (" << lat << "," << lon << "), reason: " << pj_strerrno(err) << std::endl;
+        return false;
+    }
+
+    MetersNorth = tmpNorth - GetOriginNorthing();
+    MetersEast = tmpEast - GetOriginEasting();
+    return true;
+}
+
+double CMOOSGeodesy::GetOriginEasting()
+{
+    return m_dOriginEasting;
+}
+
+double CMOOSGeodesy::GetOriginNorthing()
+{
+    return m_dOriginNorthing;
+}
+
+bool CMOOSGeodesy::UTM2LatLong(double dfX, double dfY, double& dfLat, double& dfLong)
+{
+    double x = dfX + GetOriginEasting();
+    double y = dfY + GetOriginNorthing();
+
+    dfLat = std::numeric_limits<double>::quiet_NaN();
+    dfLong = std::numeric_limits<double>::quiet_NaN();
+
+    if(!pj_latlong_ || !pj_utm_)
+    {
+        std::cerr << "Must call Initialise before calling UTM2LatLong" << std::endl;
+        return false;
+    }
+
+    int err;
+    if(err = pj_transform(pj_utm_, pj_latlong_, 1, 1, &x, &y, NULL))
+    {
+        std::cerr << "Failed to transform (x,y) = (" << dfX << "," << dfY << "), reason: " << pj_strerrno(err) << std::endl;
+        return false;
+    }
+
+    dfLat = y * RAD_TO_DEG;
+    dfLong = x * RAD_TO_DEG;
+    return true;
+}
+
--- /dev/null
+++ b/ivp/src/lib_geodesy/MOOSGeodesy.h
@@ -0,0 +1,64 @@
+// Copyright 2009-2013 Toby Schneider (https://launchpad.net/~tes)
+//                     Massachusetts Institute of Technology (2007-)
+//                     Woods Hole Oceanographic Institution (2007-)
+//                     Goby Developers Team (https://launchpad.net/~goby-dev)
+//
+//
+// This file is part of the Goby Underwater Autonomy Project MOOS Interface Library
+// ("The Goby MOOS Library").
+//
+// The Goby MOOS Library is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// The Goby MOOS Library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Goby.  If not, see <http://www.gnu.org/licenses/>.
+
+// This file uses the same basic API provided by MOOS pre-v10
+// (C) Paul Newman, released GPL v3
+
+#ifndef MOOSGeodesy20130916H
+#define MOOSGeodesy20130916H
+
+#include <proj_api.h>
+
+class CMOOSGeodesy
+{
+public:
+    CMOOSGeodesy();
+    virtual ~CMOOSGeodesy();
+
+    double GetOriginLatitude();
+    double GetOriginLongitude();
+    double GetOriginNorthing();
+    double GetOriginEasting();
+    int GetUTMZone();
+
+    bool LatLong2LocalUTM(double lat, double lon, double & MetersNorth, double & MetersEast);
+    bool UTM2LatLong(double dfX, double dfY, double& dfLat, double& dfLong);
+
+    bool Initialise(double lat, double lon);
+
+private:
+    int m_sUTMZone;
+    double m_dOriginEasting;
+    double m_dOriginNorthing;
+    double m_dOriginLongitude;
+    double m_dOriginLatitude;
+    projPJ pj_utm_, pj_latlong_;
+
+    void SetOriginLatitude(double lat);
+    void SetOriginLongitude(double lon);
+    void SetOriginEasting(double East);
+    void SetOriginNorthing(double North);
+    void SetUTMZone(int zone);
+
+};
+
+#endif
--- a/ivp/src/lib_geometry/CurrentField.cpp
+++ b/ivp/src/lib_geometry/CurrentField.cpp
@@ -29,7 +29,7 @@
 #include "AngleUtils.h"
 #include "FileBuffer.h"
 #include "XYFormatUtilsVector.h"
-#include "MOOS/libMOOSGeodesy/MOOSGeodesy.h"
+#include "MOOSGeodesy.h"
 
 using namespace std;
 
--- a/ivp/src/lib_geometry/CurrentField.h
+++ b/ivp/src/lib_geometry/CurrentField.h
@@ -26,7 +26,7 @@
 #include <string>
 #include <vector>
 #include "XYVector.h"
-#include "MOOS/libMOOSGeodesy/MOOSGeodesy.h"
+#include "MOOSGeodesy.h"
 
 class CurrentField
 {
--- a/ivp/src/lib_marineview/BackImg.cpp
+++ b/ivp/src/lib_marineview/BackImg.cpp
@@ -47,7 +47,7 @@
 #include "BackImg.h"
 #include "MBUtils.h"
 #include "FileBuffer.h"
-#include "MOOS/libMOOSGeodesy/MOOSGeodesy.h"
+#include "MOOSGeodesy.h"
 
 using namespace std;
 
--- a/ivp/src/lib_marineview/MarineViewer.h
+++ b/ivp/src/lib_marineview/MarineViewer.h
@@ -25,7 +25,7 @@
 
 #include <string>
 #include <vector>
-#include "MOOS/libMOOSGeodesy/MOOSGeodesy.h"
+#include "MOOSGeodesy.h"
 #include "FL/Fl.H"
 #include "FL/Fl_Gl_Window.H"
 #include "FL/gl.h"
--- a/ivp/src/lib_marineview/OpAreaSpec.cpp
+++ b/ivp/src/lib_marineview/OpAreaSpec.cpp
@@ -22,7 +22,7 @@
 
 #include <iostream>
 #include <cstdlib>
-#include "MOOS/libMOOSGeodesy/MOOSGeodesy.h"
+#include "MOOSGeodesy.h"
 #include "OpAreaSpec.h"
 #include "MBUtils.h"
 #include "ColorParse.h"
--- a/ivp/src/pBasicContactMgr/BasicContactMgr.h
+++ b/ivp/src/pBasicContactMgr/BasicContactMgr.h
@@ -25,7 +25,7 @@
 
 #include <vector>
 #include "MOOS/libMOOS/Thirdparty/AppCasting/AppCastingMOOSApp.h"
-#include "MOOS/libMOOSGeodesy/MOOSGeodesy.h"
+#include "MOOSGeodesy.h"
 #include "NodeRecord.h"
 #include "PlatformAlertRecord.h"
 
--- a/ivp/src/pNodeReporter/NodeReporter.h
+++ b/ivp/src/pNodeReporter/NodeReporter.h
@@ -25,7 +25,7 @@
 
 #include <string>
 #include <vector>
-#include "MOOS/libMOOSGeodesy/MOOSGeodesy.h"
+#include "MOOSGeodesy.h"
 #include "MOOS/libMOOS/Thirdparty/AppCasting/AppCastingMOOSApp.h"
 #include "NodeRecord.h"
 
--- a/ivp/src/uSimMarine/USM_MOOSApp.h
+++ b/ivp/src/uSimMarine/USM_MOOSApp.h
@@ -25,7 +25,7 @@
 
 #include <string>
 #include "MOOS/libMOOS/Thirdparty/AppCasting/AppCastingMOOSApp.h"
-#include "MOOS/libMOOSGeodesy/MOOSGeodesy.h"
+#include "MOOSGeodesy.h"
 #include "USM_Model.h"
 
 class USM_MOOSApp : public AppCastingMOOSApp
